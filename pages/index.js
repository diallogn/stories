import Head from 'next/head';
import styles from '../styles/Home.module.css';
import Search from '../components/search';
import List from '../components/list';
import db from '../db';
import { useState, useEffect, useReducer } from 'react';

export default function Home() {
  // React asyncronius data
  const getAsyncStories = () => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // reject()
        resolve({ data: { stories: db.initialStories } });
      }, 2000);
    });
  };
  // useReducer function
  const storiesReducer = (state, action) => {
    switch (action.type) {
      case 'STORIES_FETCH_INIT':
        return {
          ...state,
          isLoading: true,
          isError: false,
        };
      case 'STORIES_FETCH_SUCCESS':
        return {
          ...state,
          isLoading: false,
          isError: false,
          data: action.payload,
        };
      case 'STORIES_FETCH_FAILURE':
        return {
          ...state,
          isLoading: false,
          isError: true,
        };
      case 'REMOVE_STORY':
        return {
          ...state,
          data: state.data.filter(
            (story) => action.payload.objectID !== story.objectID
          ),
        };
      default:
        throw new Error();
    }
  };
  // useStates
  const [searchTerm, setSearchTerm] = useState('');
  const [stories, dispatchStories] = useReducer(storiesReducer, {
    data: [],
    isLoading: false,
    isError: false,
  });

  //useEffect
  useEffect(() => {
    dispatchStories({ type: 'STORIES_FETCH_INIT' });
    getAsyncStories()
      .then((res) => {
        dispatchStories({
          type: 'STORIES_FETCH_SUCCESS',
          payload: res.data.stories,
        });
      })
      .catch(() => dispatchStories({ type: 'STORIES_FETCH_FAILURE' }));
  }, []);
  // Events handler
  //search
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };
  //List filtered
  const searchedStories = stories.data.filter((story) => {
    return story.title
      .toLocaleLowerCase()
      .includes(searchTerm.toLocaleLowerCase());
  });
  // remove story
  const handleRemoveStory = (item) => {
    dispatchStories({
      type: 'REMOVE_STORY',
      payload: item,
    });
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>{db.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.header}>
          <h2 className={styles.title}>{db.title}</h2>
          <Search searchTerm={searchTerm} onSearch={handleSearch} />
        </div>
        {stories.isError && (
          <p className={styles.isError}>Something went wrong</p>
        )}
        {stories.isLoading ? (
          <p className={styles.isLoading}>Loading...</p>
        ) : (
          <List stories={searchedStories} onRemoveItem={handleRemoveStory} />
        )}
      </main>
    </div>
  );
}
